{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#Seasons\n",
    "Seasons = [\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\"]\n",
    "Sdict = {\"2005\":0,\"2006\":1,\"2007\":2,\"2008\":3,\"2009\":4,\"2010\":5,\"2011\":6,\"2012\":7,\"2013\":8,\"2014\":9}\n",
    "\n",
    "#Players\n",
    "Players = [\"KobeBryant\",\"JoeJohnson\",\"LeBronJames\",\"CarmeloAnthony\",\"DwightHoward\",\"ChrisBosh\",\"ChrisPaul\",\"KevinDurant\",\"DerrickRose\",\"DwayneWade\"]\n",
    "Pdict = {\"KobeBryant\":0,\"JoeJohnson\":1,\"LeBronJames\":2,\"CarmeloAnthony\":3,\"DwightHoward\":4,\"ChrisBosh\":5,\"ChrisPaul\":6,\"KevinDurant\":7,\"DerrickRose\":8,\"DwayneWade\":9}\n",
    "\n",
    "#Salaries\n",
    "KobeBryant_Salary = [15946875,17718750,19490625,21262500,23034375,24806250,25244493,27849149,30453805,23500000]\n",
    "JoeJohnson_Salary = [12000000,12744189,13488377,14232567,14976754,16324500,18038573,19752645,21466718,23180790]\n",
    "LeBronJames_Salary = [4621800,5828090,13041250,14410581,15779912,14500000,16022500,17545000,19067500,20644400]\n",
    "CarmeloAnthony_Salary = [3713640,4694041,13041250,14410581,15779912,17149243,18518574,19450000,22407474,22458000]\n",
    "DwightHoward_Salary = [4493160,4806720,6061274,13758000,15202590,16647180,18091770,19536360,20513178,21436271]\n",
    "ChrisBosh_Salary = [3348000,4235220,12455000,14410581,15779912,14500000,16022500,17545000,19067500,20644400]\n",
    "ChrisPaul_Salary = [3144240,3380160,3615960,4574189,13520500,14940153,16359805,17779458,18668431,20068563]\n",
    "KevinDurant_Salary = [0,0,4171200,4484040,4796880,6053663,15506632,16669630,17832627,18995624]\n",
    "DerrickRose_Salary = [0,0,0,4822800,5184480,5546160,6993708,16402500,17632688,18862875]\n",
    "DwayneWade_Salary = [3031920,3841443,13041250,14410581,15779912,14200000,15691000,17182000,18673000,15000000]\n",
    "#Matrix\n",
    "Salary = np.array([KobeBryant_Salary, JoeJohnson_Salary, LeBronJames_Salary, CarmeloAnthony_Salary, DwightHoward_Salary, ChrisBosh_Salary, ChrisPaul_Salary, KevinDurant_Salary, DerrickRose_Salary, DwayneWade_Salary])\n",
    "\n",
    "#Games \n",
    "KobeBryant_G = [80,77,82,82,73,82,58,78,6,35]\n",
    "JoeJohnson_G = [82,57,82,79,76,72,60,72,79,80]\n",
    "LeBronJames_G = [79,78,75,81,76,79,62,76,77,69]\n",
    "CarmeloAnthony_G = [80,65,77,66,69,77,55,67,77,40]\n",
    "DwightHoward_G = [82,82,82,79,82,78,54,76,71,41]\n",
    "ChrisBosh_G = [70,69,67,77,70,77,57,74,79,44]\n",
    "ChrisPaul_G = [78,64,80,78,45,80,60,70,62,82]\n",
    "KevinDurant_G = [35,35,80,74,82,78,66,81,81,27]\n",
    "DerrickRose_G = [40,40,40,81,78,81,39,0,10,51]\n",
    "DwayneWade_G = [75,51,51,79,77,76,49,69,54,62]\n",
    "#Matrix\n",
    "Games = np.array([KobeBryant_G, JoeJohnson_G, LeBronJames_G, CarmeloAnthony_G, DwightHoward_G, ChrisBosh_G, ChrisPaul_G, KevinDurant_G, DerrickRose_G, DwayneWade_G])\n",
    "\n",
    "#Minutes Played\n",
    "KobeBryant_MP = [3277,3140,3192,2960,2835,2779,2232,3013,177,1207]\n",
    "JoeJohnson_MP = [3340,2359,3343,3124,2886,2554,2127,2642,2575,2791]\n",
    "LeBronJames_MP = [3361,3190,3027,3054,2966,3063,2326,2877,2902,2493]\n",
    "CarmeloAnthony_MP = [2941,2486,2806,2277,2634,2751,1876,2482,2982,1428]\n",
    "DwightHoward_MP = [3021,3023,3088,2821,2843,2935,2070,2722,2396,1223]\n",
    "ChrisBosh_MP = [2751,2658,2425,2928,2526,2795,2007,2454,2531,1556]\n",
    "ChrisPaul_MP = [2808,2353,3006,3002,1712,2880,2181,2335,2171,2857]\n",
    "KevinDurant_MP = [1255,1255,2768,2885,3239,3038,2546,3119,3122,913]\n",
    "DerrickRose_MP = [1168,1168,1168,3000,2871,3026,1375,0,311,1530]\n",
    "DwayneWade_MP = [2892,1931,1954,3048,2792,2823,1625,2391,1775,1971]\n",
    "#Matrix\n",
    "MinutesPlayed = np.array([KobeBryant_MP, JoeJohnson_MP, LeBronJames_MP, CarmeloAnthony_MP, DwightHoward_MP, ChrisBosh_MP, ChrisPaul_MP, KevinDurant_MP, DerrickRose_MP, DwayneWade_MP])\n",
    "\n",
    "#Field Goals\n",
    "KobeBryant_FG = [978,813,775,800,716,740,574,738,31,266]\n",
    "JoeJohnson_FG = [632,536,647,620,635,514,423,445,462,446]\n",
    "LeBronJames_FG = [875,772,794,789,768,758,621,765,767,624]\n",
    "CarmeloAnthony_FG = [756,691,728,535,688,684,441,669,743,358]\n",
    "DwightHoward_FG = [468,526,583,560,510,619,416,470,473,251]\n",
    "ChrisBosh_FG = [549,543,507,615,600,524,393,485,492,343]\n",
    "ChrisPaul_FG = [407,381,630,631,314,430,425,412,406,568]\n",
    "KevinDurant_FG = [306,306,587,661,794,711,643,731,849,238]\n",
    "DerrickRose_FG = [208,208,208,574,672,711,302,0,58,338]\n",
    "DwayneWade_FG = [699,472,439,854,719,692,416,569,415,509]\n",
    "#Matrix\n",
    "FieldGoals  = np.array([KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG])\n",
    "\n",
    "#Field Goal Attempts\n",
    "KobeBryant_FGA = [2173,1757,1690,1712,1569,1639,1336,1595,73,713]\n",
    "JoeJohnson_FGA = [1395,1139,1497,1420,1386,1161,931,1052,1018,1025]\n",
    "LeBronJames_FGA = [1823,1621,1642,1613,1528,1485,1169,1354,1353,1279]\n",
    "CarmeloAnthony_FGA = [1572,1453,1481,1207,1502,1503,1025,1489,1643,806]\n",
    "DwightHoward_FGA = [881,873,974,979,834,1044,726,813,800,423]\n",
    "ChrisBosh_FGA = [1087,1094,1027,1263,1158,1056,807,907,953,745]\n",
    "ChrisPaul_FGA = [947,871,1291,1255,637,928,890,856,870,1170]\n",
    "KevinDurant_FGA = [647,647,1366,1390,1668,1538,1297,1433,1688,467]\n",
    "DerrickRose_FGA = [436,436,436,1208,1373,1597,695,0,164,835]\n",
    "DwayneWade_FGA = [1413,962,937,1739,1511,1384,837,1093,761,1084]\n",
    "#Matrix\n",
    "FieldGoalAttempts = np.array([KobeBryant_FGA, JoeJohnson_FGA, LeBronJames_FGA, CarmeloAnthony_FGA, DwightHoward_FGA, ChrisBosh_FGA, ChrisPaul_FGA, KevinDurant_FGA, DerrickRose_FGA, DwayneWade_FGA])\n",
    "\n",
    "#Points\n",
    "KobeBryant_PTS = [2832,2430,2323,2201,1970,2078,1616,2133,83,782]\n",
    "JoeJohnson_PTS = [1653,1426,1779,1688,1619,1312,1129,1170,1245,1154]\n",
    "LeBronJames_PTS = [2478,2132,2250,2304,2258,2111,1683,2036,2089,1743]\n",
    "CarmeloAnthony_PTS = [2122,1881,1978,1504,1943,1970,1245,1920,2112,966]\n",
    "DwightHoward_PTS = [1292,1443,1695,1624,1503,1784,1113,1296,1297,646]\n",
    "ChrisBosh_PTS = [1572,1561,1496,1746,1678,1438,1025,1232,1281,928]\n",
    "ChrisPaul_PTS = [1258,1104,1684,1781,841,1268,1189,1186,1185,1564]\n",
    "KevinDurant_PTS = [903,903,1624,1871,2472,2161,1850,2280,2593,686]\n",
    "DerrickRose_PTS = [597,597,597,1361,1619,2026,852,0,159,904]\n",
    "DwayneWade_PTS = [2040,1397,1254,2386,2045,1941,1082,1463,1028,1331]\n",
    "#Matrix\n",
    "Points = np.array([KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS])             \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 56148946875  62387718750  68626490625  74865262500  81104034375\n",
      "   87342806250  88885859853  98056853629 107227847405  82743500000]\n",
      " [ 42252000000  44872289469  47492575417  50112868407  52733150834\n",
      "   57478564500  63513815533  69549063045  75584314078  81619561590]\n",
      " [ 16273357800  20520704890  45918241250  50739655701  55561070152\n",
      "   51054500000  56415222500  61775945000  67136667500  72688932400]\n",
      " [ 13075726440  16527718361  45918241250  50739655701  55561070152\n",
      "   60382484603  65203899054  68483450000  78896715954  79074618000]\n",
      " [ 15820416360  16924461120  21341745754  48441918000  53528319390\n",
      "   58614720780  63701122170  68787523560  72226899738  75477110191]\n",
      " [ 11788308000  14912209620  43854055000  50739655701  55561070152\n",
      "   51054500000  56415222500  61775945000  67136667500  72688932400]\n",
      " [ 11070869040  11901543360  12731795160  16105719469  47605680500\n",
      "   52604278713  57602873405  62601471618  65731545551  70661410323]\n",
      " [           0            0  14686795200  15788304840  16889814480\n",
      "   21314947423  54598851272  58693767230  62788679667  66883592104]\n",
      " [           0            0            0  16981078800  18254554080\n",
      "   19528029360  24624845868  57753202500  62084694448  66416182875]\n",
      " [ 10675390320  13525720803  45918241250  50739655701  55561070152\n",
      "   49998200000  55248011000  60497822000  65747633000  52815000000]]\n"
     ]
    }
   ],
   "source": [
    "t = np.array([3520],dtype='int64')\n",
    "Salarytug = Salary * tugrug\n",
    "print(Salarytug)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[45.0069029  46.27205464 45.85798817 46.72897196 45.63416189 45.14948139\n",
      "  42.96407186 46.26959248 42.46575342 37.30715288]\n",
      " [45.3046595  47.05882353 43.21977288 43.66197183 45.81529582 44.27217916\n",
      "  45.43501611 42.30038023 45.38310413 43.51219512]\n",
      " [47.99780581 47.62492289 48.35566382 48.9150651  50.2617801  51.04377104\n",
      "  53.12232678 56.49926145 56.68883962 48.78811572]\n",
      " [48.09160305 47.55677908 49.15597569 44.32477216 45.80559254 45.50898204\n",
      "  43.02439024 44.92948287 45.2221546  44.41687345]\n",
      " [53.12145289 60.25200458 59.85626283 57.20122574 61.15107914 59.29118774\n",
      "  57.30027548 57.81057811 59.125      59.33806147]\n",
      " [50.50597976 49.63436929 49.36708861 48.6935867  51.8134715  49.62121212\n",
      "  48.69888476 53.47298787 51.62644281 46.04026846]\n",
      " [42.97782471 43.74282434 48.79938033 50.27888446 49.29356358 46.3362069\n",
      "  47.75280899 48.13084112 46.66666667 48.54700855]\n",
      " [47.29520866 47.29520866 42.97218155 47.55395683 47.60191847 46.22886866\n",
      "  49.57594449 51.01186322 50.29620853 50.96359743]\n",
      " [47.70642202 47.70642202 47.70642202 47.51655629 48.94391843 44.52097683\n",
      "  43.45323741         nan 35.36585366 40.47904192]\n",
      " [49.46921444 49.06444906 46.85165422 49.10868315 47.5843812  50.\n",
      "  49.70131422 52.05855444 54.53350854 46.95571956]]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "FieldGoalsPerc = FieldGoals*100/FieldGoalAttempts\n",
    "print(FieldGoalsPerc)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  4866.30302106   5642.91401274   6106.08552632   7183.27702703\n",
      "    8125.           8926.32241814  11310.25672043   9242.99668105\n",
      "  172055.39548023  19469.75973488]\n",
      " [  3592.81437126   5402.36922425   4034.81214478   4555.87932138\n",
      "    5189.45045045   6391.73844949   8480.75834509   7476.3985617\n",
      "    8336.58951456   8305.54998209]\n",
      " [  1375.12645046   1826.98746082   4308.30855633   4718.59233792\n",
      "    5320.2670263    4733.92099249   6888.43508169   6098.36635384\n",
      "    6570.46864232   8280.94665062]\n",
      " [  1262.7133628    1888.19026549   4647.6300784    6328.75757576\n",
      "    5990.85497342   6233.82151945   9871.30810235   7836.42224013\n",
      "    7514.24346076  15726.8907563 ]\n",
      " [  1487.30883813   1590.04961958   1962.84779793   4876.99397377\n",
      "    5347.37601126   5671.95229983   8739.98550725   7177.20793534\n",
      "    8561.42654424  17527.61324612]\n",
      " [  1217.01199564   1593.38600451   5136.08247423   4921.64651639\n",
      "    6246.99604117   5187.83542039   7983.30842053   7149.55175224\n",
      "    7533.58356381  13267.6092545 ]\n",
      " [  1119.74358974   1436.5320867    1202.91417166   1523.71385743\n",
      "    7897.48831776   5187.553125     7501.05685465   7614.32890792\n",
      "    8599.00092123   7024.34826741]\n",
      " [     0.              0.           1506.93641618   1554.25996534\n",
      "    1480.97560976   1992.64746544   6090.58601728   5344.5431228\n",
      "    5711.92408712  20805.72179628]\n",
      " [     0.              0.              0.           1607.6\n",
      "    1805.80982236   1832.83542631   5086.33309091             inf\n",
      "   56696.74598071  12328.67647059]\n",
      " [  1048.38174274   1989.35422061   6674.12998976   4727.88090551\n",
      "    5651.83094556   5030.10981226   9656.           7186.1145964\n",
      "   10520.           7610.3500761 ]]\n",
      "[[ 199335.9375      230113.63636364  237690.54878049  259298.7804878\n",
      "   315539.38356164  302515.24390244  435249.87931034  357040.37179487\n",
      "  5075634.16666667  671428.57142857]\n",
      " [ 146341.46341463  223582.26315789  164492.40243902  180159.07594937\n",
      "   197062.55263158  226729.16666667  300642.88333333  274342.29166667\n",
      "   271730.60759494  289759.875     ]\n",
      " [  58503.79746835   74719.1025641   173883.33333333  177908.40740741\n",
      "   207630.42105263  183544.30379747  258427.41935484  230855.26315789\n",
      "   247629.87012987  299194.20289855]\n",
      " [  46420.5          72216.01538462  169366.88311688  218342.13636364\n",
      "   228694.37681159  222717.44155844  336701.34545455  290298.50746269\n",
      "   291006.15584416  561450.        ]\n",
      " [  54794.63414634   58618.53658537   73917.97560976  174151.89873418\n",
      "   185397.43902439  213425.38461538  335032.77777778  257057.36842105\n",
      "   288918.          522835.87804878]\n",
      " [  47828.57142857   61380.          185895.52238806  187150.4025974\n",
      "   225427.31428571  188311.68831169  281096.49122807  237094.59459459\n",
      "   241360.75949367  469190.90909091]\n",
      " [  40310.76923077   52815.           45199.5          58643.44871795\n",
      "   300455.55555556  186751.9125      272663.41666667  253992.25714286\n",
      "   301103.72580645  244738.57317073]\n",
      " [      0.               0.           52140.           60595.13513514\n",
      "    58498.53658537   77611.06410256  234948.96969697  205797.90123457\n",
      "   220155.88888889  703541.62962963]\n",
      " [      0.               0.               0.           59540.74074074\n",
      "    66467.69230769   68471.11111111  179325.84615385              nan\n",
      "  1763268.8         369860.29411765]\n",
      " [  40425.6          75322.41176471  255710.78431373  182412.41772152\n",
      "   204933.92207792  186842.10526316  320224.48979592  249014.49275362\n",
      "   345796.2962963   241935.48387097]]\n"
     ]
    }
   ],
   "source": [
    "MinSalary = Salary/MinutesPlayed\n",
    "print(MinSalary)\n",
    "gamemin = MinutesPlayed/Games\n",
    "GameSalary = gamemin * MinSalary\n",
    "print(GameSalary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KobeBryant\n",
      "Total: 229306822 $\n",
      "807389320262 ₮\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "a = np.max(Salary)\n",
    "b = np.where(a == Salary)\n",
    "c = b[0]\n",
    "d = c.item(0)\n",
    "print(Players[d])\n",
    "totalSalary = np.sum(Salary,axis=1)\n",
    "print(\"Total:\",totalSalary[d],\"$\")\n",
    "tug2 = 3521\n",
    "tug2 = np.dtype('int64').type(tugrug2)\n",
    "print(totalSalary[d] * tugrug2,\"₮\")\n",
    "plt.title(Players[d])\n",
    "plt.plot(Seasons,Salary[0],marker='.',markeredgecolor='red')\n",
    "plt.show()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  5630.95868644   7291.66666667   8390.28196298   9660.38164471\n",
      "   11692.57614213  11937.56015399  15621.59220297  13056.3286451\n",
      "  366913.31325301  30051.15089514]\n",
      " [  7259.52813067   8937.01893408   7581.99943789   8431.61552133\n",
      "    9250.62013589  12442.45426829  15977.47829938  16882.6025641\n",
      "   17242.3437751   20087.33968804]\n",
      " [  1865.13317191   2733.62570356   5796.11111111   6254.59244792\n",
      "    6988.44641275   6868.7825675    9520.2020202    8617.3870334\n",
      "    9127.57300144  11844.17670683]\n",
      " [  1750.06597549   2495.50292398   6593.14964611   9581.50332447\n",
      "    8121.41636644   8705.19949239  14874.35662651  10130.20833333\n",
      "   10609.59943182  23248.44720497]\n",
      " [  3477.67801858   3331.06029106   3575.97286136   8471.67487685\n",
      "   10114.83033932   9331.37892377  16254.95956873  15074.35185185\n",
      "   15815.86584426  33183.08204334]\n",
      " [  2129.77099237   2713.1454196    8325.53475936   8253.48281787\n",
      "    9404.          10083.44923505  15631.70731707  14241.07142857\n",
      "   14884.85558158  22246.12068966]\n",
      " [  2499.39586645   3061.73913043   2147.24465558   2568.32622122\n",
      "   16076.69441141  11782.45504732  13759.29772918  14991.11129848\n",
      "   15753.95021097  12831.56202046]\n",
      " [     0.              0.           2568.4729064    2396.60074826\n",
      "    1940.48543689   2801.32484961   8381.96324324   7311.24122807\n",
      "    6877.21827998  27690.41399417]\n",
      " [     0.              0.              0.           3543.57090375\n",
      "    3202.27300803   2737.49259625   8208.57746479             inf\n",
      "  110897.40880503  20866.01216814]\n",
      " [  1486.23529412   2749.78024338  10399.72089314   6039.63998324\n",
      "    7716.33838631   7315.81658939  14501.84842884  11744.36090226\n",
      "   18164.39688716  11269.72201352]]\n"
     ]
    }
   ],
   "source": [
    "OnePSalary = Salary/Points\n",
    "print(OnePSalary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KobeBryant\n"
     ]
    }
   ],
   "source": [
    "# Аль тоглогч хамгийн их довтолгоо алдсан бэ?\n",
    "Miss = FieldGoalAttempts - FieldGoals\n",
    "MaxMiss = np.max(Miss)\n",
    "pin = np.where(MaxMiss == Miss)\n",
    "pla = pin[0]\n",
    "n = pla.item(0)\n",
    "print(Players[n])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DerrickRose\n"
     ]
    }
   ],
   "source": [
    "p = np.full((10,10),100)\n",
    "MissPerc = p - FieldGoalsPerc\n",
    "MissPerc[np.isnan(MissPerc)] = 0\n",
    "MaxMissPerc = np.max(MissPerc)\n",
    "i = np.where(MaxMissPerc == MissPerc)\n",
    "j = i[0]\n",
    "k = j.item(0)\n",
    "print(Players[k])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LeBronJames\n"
     ]
    }
   ],
   "source": [
    "avgpoint = np.average(Points,axis=1)\n",
    "Maxavgpoint = np.max(avgpoint)\n",
    "a = np.where(Maxavgpoint == avgpoint)\n",
    "b = a[0]\n",
    "c = b.item(0)\n",
    "print(Players[c])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
